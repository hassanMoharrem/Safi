<?php

namespace App\Http\Controllers\User;

use App\Http\Controllers\Base\BaseController;
use App\Models\DessertStation;
use App\Models\UpdatePhase;
use Illuminate\Http\Request;

class UpdatePhaseController extends BaseController
{
    public function index($id)
    {
        $station = DessertStation::query()->where('id',$id)->where('user_id',auth()->id())->first();
        if ($station){
            $data = UpdatePhase::all()->where('station_id',$id);
            return response()->json([
                'status' => 200,
                'message' => 'Success',
                'success' => true,
                'data' => $data
            ]);
        }else{
            return response()->json([
                'status' => 404,
                'message' => 'Not Access to Show Data',
                'success' => false,
            ]);
        }

    }
    public function show($id)
    {
        $model = UpdatePhase::class;
        $updateSt = UpdatePhase::query()->where('id',$id)->first();
        if ($updateSt){
            $station = DessertStation::query()->where('id',$updateSt->station_id)->where('user_id', auth()->id())->first();
            if ($station){
                return parent::showBase($id, $model); // TODO: Change the autogenerated stub
            }else{
                return response()->json([
                    'status' => 500,
                    'message' => 'User Not Access',
                    'success' => false,
                ]);
            }
        }else{
            return response()->json([
                'status' => 500,
                'message' => 'Update Phase Is Null',
                'success' => false,
            ]);
        }

    }

    public function store(Request $request)
    {
        $model = UpdatePhase::class;
        $params = $request->all();
        $rules = [
            'last_date'=>'required|date',
            'time'=>'required|numeric|min:1',
            'next_date'=>'required|date',
            'station_id'=>'required|exists:dessert_stations,id'
        ];
        $station = DessertStation::query()->where('id',$request->station_id)->where('user_id', auth()->id())->first();
        if ($station){
            return parent::storeBase($model, $params, $rules); // TODO: Change the autogenerated stub
        }else{
            return response()->json([
                'status' => 404,
                'message' => 'User Not Access',
                'success' => false,
            ]);
        }

    }
    public function update($id)
    {
        $model = UpdatePhase::class;
        $params = \request()->all();
        $updateSt = UpdatePhase::query()->where('id',$id)->first();
        if ($updateSt){
            $station = DessertStation::query()->where('id',$params['station_id'])->where('user_id', auth()->id())->first();
            if ($station){
                $params['user_id'] = auth()->id();
                $rules = [
                    'last_date'=>'required|date',
                    'time'=>'required|numeric|min:1',
                    'next_date'=>'required|date',
                    'station_id'=>'required|exists:dessert_stations,id'
                ];
                return parent::updateBase($id, $model, $params, $rules); // TODO: Change the autogenerated stub
            }else{
                return response()->json([
                    'status' => 500,
                    'message' => 'User Not Access',
                    'success' => false,
                ]);
            }
        }else{
            return response()->json([
                'status' => 500,
                'message' => 'Update Phase Is Null',
                'success' => false,
            ]);
        }

    }
    public function destroy($id)
    {
        $model = UpdatePhase::class;
        $updateSt = UpdatePhase::query()->where('id',$id)->first();
        if ($updateSt){
            $station = DessertStation::query()->where('id',$updateSt->station_id)->where('user_id', auth()->id())->first();
            if ($station){
                return parent::destroyBase($id, $model); // TODO: Change the autogenerated stub
            }else{
                return response()->json([
                    'status' => 500,
                    'message' => 'User Not Access',
                    'success' => false,
                ]);
            }
        }else{
            return response()->json([
                'status' => 500,
                'message' => 'Update Phase Is Null',
                'success' => false,
            ]);
        }


    }
}
